"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelfAppBuilder = void 0;
exports.getUniversalLink = getUniversalLink;
const uuid_1 = require("./circuits/uuid");
const uuid_2 = require("uuid");
const constants_1 = require("../constants/constants");
const scope_1 = require("./scope");
class SelfAppBuilder {
    constructor(config) {
        if (!config.appName) {
            throw new Error('appName is required');
        }
        if (!config.scope) {
            throw new Error('scope is required');
        }
        if (!config.endpoint) {
            throw new Error('endpoint is required');
        }
        // Check if scope and endpoint contain only ASCII characters
        if (!/^[\x00-\x7F]*$/.test(config.scope)) {
            throw new Error("Scope must contain only ASCII characters (0-127)");
        }
        if (!/^[\x00-\x7F]*$/.test(config.endpoint)) {
            throw new Error("Endpoint must contain only ASCII characters (0-127)");
        }
        if (config.scope.length > 31) {
            throw new Error("Scope must be less than 31 characters");
        }
        const formattedEndpoint = (0, scope_1.formatEndpoint)(config.endpoint);
        if (formattedEndpoint.length > 496) {
            throw new Error(`Endpoint must be less than 496 characters, current endpoint: ${formattedEndpoint}, length: ${formattedEndpoint.length}`);
        }
        if (!config.userId) {
            throw new Error('userId is required');
        }
        if (config.endpointType === 'https' && !config.endpoint.startsWith('https://')) {
            throw new Error('endpoint must start with https://');
        }
        if (config.endpointType === 'celo' && !config.endpoint.startsWith('0x')) {
            throw new Error('endpoint must be a valid address');
        }
        if (config.userIdType === 'hex') {
            if (!config.userId.startsWith('0x')) {
                throw new Error('userId as hex must start with 0x');
            }
            config.userId = config.userId.slice(2);
        }
        if (!(0, uuid_1.validateUserId)(config.userId, config.userIdType ?? "uuid")) {
            throw new Error('userId must be a valid UUID or address');
        }
        this.config = {
            sessionId: (0, uuid_2.v4)(),
            userIdType: 'uuid',
            devMode: false,
            endpointType: 'https',
            header: "",
            logoBase64: "",
            disclosures: {},
            ...config,
        };
    }
    build() {
        return this.config;
    }
}
exports.SelfAppBuilder = SelfAppBuilder;
function getUniversalLink(selfApp) {
    return `${constants_1.REDIRECT_URL}?selfApp=${encodeURIComponent(JSON.stringify(selfApp))}`;
}
