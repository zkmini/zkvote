"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.brutforceSignatureAlgorithm = brutforceSignatureAlgorithm;
exports.verifySignature = verifySignature;
const parseCertificateSimple_1 = require("../../certificate_parsing/parseCertificateSimple");
const node_forge_1 = __importDefault(require("node-forge"));
const asn1js = __importStar(require("asn1js"));
const elliptic_1 = require("../../certificate_parsing/elliptic");
const curves_1 = require("../../certificate_parsing/curves");
const pkijs_1 = require("pkijs");
const constants_1 = require("../../../constants/constants");
const hash_1 = require("../../hash");
function brutforceSignatureAlgorithm(passportData) {
    const parsedDsc = (0, parseCertificateSimple_1.parseCertificateSimple)(passportData.dsc);
    if (parsedDsc.signatureAlgorithm === 'ecdsa') {
        const hashAlgorithm = brutforceHashAlgorithm(passportData, 'ecdsa');
        return {
            signatureAlgorithm: 'ecdsa',
            hashAlgorithm: hashAlgorithm,
            saltLength: 0,
        };
    }
    else if (parsedDsc.signatureAlgorithm === 'rsa') {
        const hashAlgorithm = brutforceHashAlgorithm(passportData, 'rsa');
        if (hashAlgorithm) {
            return {
                signatureAlgorithm: 'rsa',
                hashAlgorithm: hashAlgorithm,
                saltLength: 0,
            };
        }
    }
    // it's important to not put 'else if' statement here, because a rsapss signature can use rsa key certificate.
    for (const saltLength of constants_1.saltLengths) {
        const hashAlgorithm = brutforceHashAlgorithm(passportData, 'rsapss', saltLength);
        if (hashAlgorithm) {
            return {
                signatureAlgorithm: 'rsapss',
                hashAlgorithm: hashAlgorithm,
                saltLength: saltLength,
            };
        }
    }
}
function brutforceHashAlgorithm(passportData, signatureAlgorithm, saltLength) {
    for (const hashFunction of constants_1.hashAlgos) {
        if (verifySignature(passportData, signatureAlgorithm, hashFunction, saltLength)) {
            return hashFunction;
        }
    }
    return false;
}
function verifySignature(passportData, signatureAlgorithm, hashAlgorithm, saltLength = 0) {
    switch (signatureAlgorithm) {
        case 'ecdsa':
            return verifyECDSA(passportData, hashAlgorithm);
        case 'rsa':
            return verifyRSA(passportData, hashAlgorithm);
        case 'rsapss':
            return verifyRSAPSS(passportData, hashAlgorithm, saltLength);
    }
}
function verifyECDSA(passportData, hashAlgorithm) {
    const elliptic = (0, elliptic_1.initElliptic)();
    const { dsc, signedAttr, encryptedDigest } = passportData;
    const { publicKeyDetails } = (0, parseCertificateSimple_1.parseCertificateSimple)(dsc);
    const certBuffer = Buffer.from(dsc.replace(/(-----(BEGIN|END) CERTIFICATE-----|\n)/g, ''), 'base64');
    const asn1Data = asn1js.fromBER(certBuffer);
    const cert = new pkijs_1.Certificate({ schema: asn1Data.result });
    const publicKeyInfo = cert.subjectPublicKeyInfo;
    const publicKeyBuffer = publicKeyInfo.subjectPublicKey.valueBlock.valueHexView;
    const curveForElliptic = (0, curves_1.getCurveForElliptic)(publicKeyDetails.curve);
    const ec = new elliptic.ec(curveForElliptic);
    const key = ec.keyFromPublic(publicKeyBuffer);
    const msgHash = (0, hash_1.hash)(hashAlgorithm, signedAttr, 'hex');
    const signature_crypto = Buffer.from(encryptedDigest).toString('hex');
    return key.verify(msgHash, signature_crypto);
}
function verifyRSA(passportData, hashAlgorithm) {
    const { dsc, signedAttr, encryptedDigest } = passportData;
    const cert = node_forge_1.default.pki.certificateFromPem(dsc);
    const publicKey = cert.publicKey;
    const msgHash = (0, hash_1.hash)(hashAlgorithm, signedAttr, 'binary');
    const signature = Buffer.from(encryptedDigest).toString('binary');
    try {
        return publicKey.verify(msgHash, signature);
    }
    catch (error) {
        return false;
    }
}
function verifyRSAPSS(passportData, hashAlgorithm, saltLength) {
    const { dsc, signedAttr, encryptedDigest } = passportData;
    const cert = node_forge_1.default.pki.certificateFromPem(dsc);
    const publicKey = cert.publicKey;
    const msgHash = (0, hash_1.hash)(hashAlgorithm, signedAttr, 'binary');
    const signature = Buffer.from(encryptedDigest).toString('binary');
    if (saltLength === 0) {
        throw new Error('Salt length is required for RSA-PSS');
    }
    try {
        const pss = node_forge_1.default.pss.create({
            md: node_forge_1.default.md[hashAlgorithm].create(),
            mgf: node_forge_1.default.mgf.mgf1.create(node_forge_1.default.md[hashAlgorithm].create()),
            saltLength: saltLength,
        });
        return publicKey.verify(msgHash, signature, pss);
    }
    catch (error) {
        return false;
    }
}
