"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCertificate = parseCertificate;
const fs_1 = __importDefault(require("fs"));
const child_process_1 = require("child_process");
const parseCertificateSimple_1 = require("./parseCertificateSimple");
function parseCertificate(pem, fileName) {
    let certificateData = {
        id: '',
        issuer: '',
        validity: {
            notBefore: '',
            notAfter: '',
        },
        subjectKeyIdentifier: '',
        authorityKeyIdentifier: '',
        signatureAlgorithm: '',
        hashAlgorithm: '',
        publicKeyDetails: undefined,
        tbsBytes: undefined,
        tbsBytesLength: '',
        rawPem: '',
        rawTxt: '',
        publicKeyAlgoOID: '',
    };
    try {
        certificateData = (0, parseCertificateSimple_1.parseCertificateSimple)(pem);
        const baseFileName = fileName.replace('.pem', '');
        const tempCertPath = `/tmp/${baseFileName}.pem`;
        const formattedPem = pem.includes('-----BEGIN CERTIFICATE-----')
            ? pem
            : `-----BEGIN CERTIFICATE-----\n${pem}\n-----END CERTIFICATE-----`;
        fs_1.default.writeFileSync(tempCertPath, formattedPem);
        try {
            const openSslOutput = (0, child_process_1.execSync)(`openssl x509 -in ${tempCertPath} -text -noout`).toString();
            certificateData.rawTxt = openSslOutput;
        }
        catch (error) {
            console.error(`Error executing OpenSSL command: ${error}`);
            certificateData.rawTxt = 'Error: Unable to generate human-readable format';
        }
        finally {
            try {
                fs_1.default.unlinkSync(tempCertPath);
            }
            catch (e) {
                // Ignore cleanup errors
            }
        }
        return certificateData;
    }
    catch (error) {
        console.error(`Error processing certificate ${fileName}:`, error);
        throw error;
    }
}
