"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCircuitNameOld = exports.getCircuitName = exports.getAuthorityKeyIdentifier = void 0;
exports.parseCertificateSimple = parseCertificateSimple;
exports.getParamsECDSA = getParamsECDSA;
exports.getHashAlgorithm = getHashAlgorithm;
exports.getCertificateFromPem = getCertificateFromPem;
exports.getTBSBytesForge = getTBSBytesForge;
const asn1js = __importStar(require("asn1js"));
const pkijs_1 = require("pkijs");
const oids_1 = require("./oids");
const curves_1 = require("./curves");
const utils_1 = require("./utils");
const constants_1 = require("../../constants/constants");
const elliptic_1 = require("./elliptic");
function parseCertificateSimple(pem) {
    let certificateData = {
        id: '',
        issuer: '',
        validity: {
            notBefore: '',
            notAfter: '',
        },
        subjectKeyIdentifier: '',
        authorityKeyIdentifier: '',
        signatureAlgorithm: '',
        hashAlgorithm: '',
        publicKeyDetails: undefined,
        tbsBytes: undefined,
        tbsBytesLength: '',
        rawPem: '',
        rawTxt: '',
        publicKeyAlgoOID: '',
    };
    try {
        const cert = getCertificateFromPem(pem);
        certificateData.tbsBytes = getTBSBytesForge(cert);
        certificateData.tbsBytesLength = certificateData.tbsBytes.length.toString();
        const publicKeyAlgoOID = cert.subjectPublicKeyInfo.algorithm.algorithmId;
        const publicKeyAlgoFN = (0, oids_1.getFriendlyName)(publicKeyAlgoOID);
        const signatureAlgoOID = cert.signatureAlgorithm.algorithmId;
        const signatureAlgoFN = (0, oids_1.getFriendlyName)(signatureAlgoOID);
        certificateData.hashAlgorithm = getHashAlgorithm(signatureAlgoFN);
        certificateData.publicKeyAlgoOID = publicKeyAlgoOID;
        let params;
        if (publicKeyAlgoFN === 'RSA' && signatureAlgoFN != 'RSASSA_PSS') {
            certificateData.signatureAlgorithm = 'rsa';
            params = getParamsRSA(cert);
        }
        else if (publicKeyAlgoFN === 'ECC') {
            certificateData.signatureAlgorithm = 'ecdsa';
            params = getParamsECDSA(cert);
        }
        else if (publicKeyAlgoFN === 'RSASSA_PSS' || signatureAlgoFN === 'RSASSA_PSS') {
            certificateData.signatureAlgorithm = 'rsapss';
            params = getParamsRSAPSS(cert);
        }
        else {
            console.log(publicKeyAlgoFN);
        }
        certificateData.publicKeyDetails = params;
        certificateData.issuer = (0, utils_1.getIssuerCountryCode)(cert);
        certificateData.validity = {
            notBefore: cert.notBefore.value.toString(),
            notAfter: cert.notAfter.value.toString(),
        };
        const ski = (0, utils_1.getSubjectKeyIdentifier)(cert);
        certificateData.id = ski.slice(0, 12);
        certificateData.subjectKeyIdentifier = ski;
        certificateData.rawPem = pem;
        const authorityKeyIdentifier = (0, exports.getAuthorityKeyIdentifier)(cert);
        certificateData.authorityKeyIdentifier = authorityKeyIdentifier;
        // corner case for rsapss
        if (certificateData.signatureAlgorithm === 'rsapss' && (!certificateData.hashAlgorithm || certificateData.hashAlgorithm === 'unknown')) {
            certificateData.hashAlgorithm = certificateData.publicKeyDetails.hashAlgorithm;
        }
        return certificateData;
    }
    catch (error) {
        console.error(`Error processing certificate`, error);
        throw error;
    }
}
function getParamsRSA(cert) {
    const publicKeyValue = cert.subjectPublicKeyInfo.parsedKey;
    const modulusBytes = publicKeyValue.modulus.valueBlock.valueHexView;
    const modulusHex = Buffer.from(modulusBytes).toString('hex');
    const exponentBigInt = publicKeyValue.publicExponent.toBigInt();
    const exponentDecimal = exponentBigInt.toString();
    const actualBits = modulusBytes.length * 8;
    return {
        modulus: modulusHex,
        exponent: exponentDecimal,
        bits: actualBits.toString(),
    };
}
function getParamsRSAPSS(cert) {
    // Get the subjectPublicKey BitString
    const spki = cert.subjectPublicKeyInfo;
    const spkiValueHex = spki.subjectPublicKey.valueBlock.valueHexView;
    // Parse the public key ASN.1 structure
    const asn1PublicKey = asn1js.fromBER(spkiValueHex);
    if (asn1PublicKey.offset === -1) {
        throw new Error('Error parsing public key ASN.1 structure');
    }
    // The public key is an RSAPublicKey structure
    const rsaPublicKey = new pkijs_1.RSAPublicKey({ schema: asn1PublicKey.result });
    const modulusBytes = rsaPublicKey.modulus.valueBlock.valueHexView;
    const modulusHex = Buffer.from(modulusBytes).toString('hex');
    const exponentBigInt = rsaPublicKey.publicExponent.toBigInt();
    const exponentDecimal = exponentBigInt.toString();
    const actualBits = modulusBytes.length * 8;
    const sigAlgParams = cert.signatureAlgorithm.algorithmParams;
    const pssParams = new pkijs_1.RSASSAPSSParams({ schema: sigAlgParams });
    const hashAlgorithm = (0, oids_1.getFriendlyName)(pssParams.hashAlgorithm.algorithmId);
    const mgf = (0, oids_1.getFriendlyName)(pssParams.maskGenAlgorithm.algorithmId);
    return {
        modulus: modulusHex,
        exponent: exponentDecimal,
        bits: actualBits.toString(),
        hashAlgorithm: hashAlgorithm,
        mgf: mgf,
        saltLength: pssParams.saltLength.toString(),
    };
}
function getParamsECDSA(cert) {
    try {
        const algorithmParams = cert.subjectPublicKeyInfo.algorithm.algorithmParams;
        if (!algorithmParams) {
            console.error('No algorithm params found');
            return {
                curve: 'Unknown',
                params: {},
                bits: 'Unknown',
                x: 'Unknown',
                y: 'Unknown',
            };
        }
        let curveName, bits, x, y = 'Unknown';
        let curveParams = {};
        // Try to get the curve name from the OID
        if (algorithmParams instanceof asn1js.ObjectIdentifier) {
            const curveOid = algorithmParams.valueBlock.toString();
            curveName = (0, oids_1.getSecpFromNist)((0, oids_1.getFriendlyName)(curveOid)) || 'Unknown';
            bits = (0, curves_1.getECDSACurveBits)(curveName);
        }
        // If the OID of the curve is not present, we try to get the curve parameters and identify the curve from them
        else {
            const params = asn1js.fromBER(algorithmParams.valueBeforeDecodeView).result;
            const valueBlock = params.valueBlock;
            if (valueBlock.value && valueBlock.value.length >= 5) {
                const curveParams = {};
                // Field ID (index 1)
                const fieldId = valueBlock.value[1];
                if (fieldId && fieldId.valueBlock && fieldId.valueBlock.value) {
                    const fieldType = fieldId.valueBlock.value[0];
                    const prime = fieldId.valueBlock.value[1];
                    //curveParams.fieldType = fieldType.valueBlock.toString();
                    curveParams.p = Buffer.from(prime.valueBlock.valueHexView).toString('hex');
                }
                // Curve Coefficients (index 2)
                const curveCoefficients = valueBlock.value[2];
                if (curveCoefficients &&
                    curveCoefficients.valueBlock &&
                    curveCoefficients.valueBlock.value) {
                    const a = curveCoefficients.valueBlock.value[0];
                    const b = curveCoefficients.valueBlock.value[1];
                    curveParams.a = Buffer.from(a.valueBlock.valueHexView).toString('hex');
                    curveParams.b = Buffer.from(b.valueBlock.valueHexView).toString('hex');
                }
                // Base Point G (index 3)
                const basePoint = valueBlock.value[3];
                if (basePoint && basePoint.valueBlock) {
                    curveParams.G = Buffer.from(basePoint.valueBlock.valueHexView).toString('hex');
                }
                // Order n (index 4)
                const order = valueBlock.value[4];
                if (order && order.valueBlock) {
                    curveParams.n = Buffer.from(order.valueBlock.valueHexView).toString('hex');
                }
                if (valueBlock.value.length >= 6) {
                    // Cofactor h (index 5)
                    const cofactor = valueBlock.value[5];
                    if (cofactor && cofactor.valueBlock) {
                        curveParams.h = Buffer.from(cofactor.valueBlock.valueHexView).toString('hex');
                    }
                }
                else {
                    curveParams.h = '01';
                }
                const identifiedCurve = (0, curves_1.identifyCurve)(curveParams);
                curveName = identifiedCurve;
                bits = (0, curves_1.getECDSACurveBits)(curveName);
            }
            else {
                if (valueBlock.value) {
                    console.log(valueBlock.value);
                }
                else {
                    console.log('No value block found');
                }
            }
        }
        // Get the public key x and y parameters
        const publicKeyBuffer = cert.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView;
        if (publicKeyBuffer && curveName !== 'Unknown') {
            const elliptic = (0, elliptic_1.initElliptic)();
            const ec = new elliptic.ec((0, curves_1.getCurveForElliptic)(curveName));
            const key = ec.keyFromPublic(publicKeyBuffer);
            const x_point = key.getPublic().getX().toString('hex');
            const y_point = key.getPublic().getY().toString('hex');
            // For 521 bit curves, pad to expected length of 132 hex chars (66 bytes)
            if (curveName === 'secp521r1' || curveName === 'brainpoolP521r1') {
                x = x_point.padStart(132, '0');
                y = y_point.padStart(132, '0');
            }
            else {
                // For other curves, ensure even length
                x = x_point.length % 2 === 0 ? x_point : '0' + x_point;
                y = y_point.length % 2 === 0 ? y_point : '0' + y_point;
            }
        }
        return { curve: curveName, params: curveParams, bits: bits, x: x, y: y };
    }
    catch (error) {
        console.error('Error parsing EC parameters:', error);
        return {
            curve: 'Error',
            params: {},
            bits: 'Unknown',
            x: 'Unknown',
            y: 'Unknown',
        };
    }
}
const getAuthorityKeyIdentifier = (cert) => {
    const authorityKeyIdentifier = cert.extensions.find((ext) => ext.extnID === '2.5.29.35');
    if (authorityKeyIdentifier) {
        let akiValue = Buffer.from(authorityKeyIdentifier.extnValue.valueBlock.valueHexView).toString('hex');
        // Match the ASN.1 sequence header pattern: 30 followed by length
        const sequenceMatch = akiValue.match(/^30([0-9a-f]{2}|8[0-9a-f][0-9a-f])/i);
        if (sequenceMatch) {
            // console.log('Sequence length indicator:', sequenceMatch[1]);
        }
        // Match the keyIdentifier pattern: 80 followed by length (usually 14)
        const keyIdMatch = akiValue.match(/80([0-9a-f]{2})/i);
        if (keyIdMatch) {
            const keyIdLength = parseInt(keyIdMatch[1], 16);
            // Extract the actual key ID (length * 2 because hex)
            const startIndex = akiValue.indexOf(keyIdMatch[0]) + 4;
            akiValue = akiValue.slice(startIndex, startIndex + (keyIdLength * 2));
            return akiValue.toUpperCase();
        }
    }
    return null;
};
exports.getAuthorityKeyIdentifier = getAuthorityKeyIdentifier;
const getCircuitName = (circuitMode, signatureAlgorithm, hashFunction, domainParameter, keyLength) => {
    const circuit = constants_1.circuitNameFromMode[circuitMode];
    if (circuit == 'vc_and_disclose') {
        return 'vc_and_disclose';
    }
    if (circuit == 'dsc') {
        return (circuit +
            '_' +
            signatureAlgorithm +
            '_' +
            hashFunction +
            '_' +
            domainParameter +
            '_' +
            keyLength);
    }
    return (circuit +
        '_' +
        signatureAlgorithm +
        '_' +
        hashFunction +
        '_' +
        domainParameter +
        '_' +
        keyLength);
};
exports.getCircuitName = getCircuitName;
const getCircuitNameOld = (circuitMode, signatureAlgorithm, hashFunction) => {
    const circuit = constants_1.circuitNameFromMode[circuitMode];
    if (circuit == 'vc_and_disclose') {
        return 'vc_and_disclose';
    }
    else if (signatureAlgorithm === 'ecdsa') {
        return circuit + '_' + signatureAlgorithm + '_secp256r1_' + hashFunction;
    }
    else {
        return circuit + '_' + signatureAlgorithm + '_65537_' + hashFunction;
    }
};
exports.getCircuitNameOld = getCircuitNameOld;
function getHashAlgorithm(rawSignatureAlgorithm) {
    const input = rawSignatureAlgorithm.toLowerCase();
    const patterns = [/sha-?1/i, /sha-?224/i, /sha-?256/i, /sha-?384/i, /sha-?512/i];
    for (const pattern of patterns) {
        const match = input.match(pattern);
        if (match) {
            // Remove any hyphens and return standardized format
            return match[0].replace('-', '');
        }
    }
    return 'unknown';
}
function getCertificateFromPem(pemContent) {
    const pemFormatted = pemContent.replace(/(-----(BEGIN|END) CERTIFICATE-----|\n|\r)/g, '');
    const binary = Buffer.from(pemFormatted, 'base64');
    const arrayBuffer = new ArrayBuffer(binary.length);
    const view = new Uint8Array(arrayBuffer);
    for (let i = 0; i < binary.length; i++) {
        view[i] = binary[i];
    }
    const asn1 = asn1js.fromBER(arrayBuffer);
    if (asn1.offset === -1) {
        throw new Error(`ASN.1 parsing error: ${asn1.result.error}`);
    }
    return new pkijs_1.Certificate({ schema: asn1.result });
}
function getTBSBytesForge(certificate) {
    return Array.from(certificate.tbsView.map((byte) => parseInt(byte.toString(16), 16)));
}
