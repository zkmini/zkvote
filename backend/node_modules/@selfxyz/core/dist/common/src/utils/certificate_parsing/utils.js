"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthorityKeyIdentifier = exports.getSubjectKeyIdentifier = void 0;
exports.getIssuerCountryCode = getIssuerCountryCode;
const asn1js = __importStar(require("asn1js"));
const js_sha256_1 = require("js-sha256");
const getSubjectKeyIdentifier = (cert) => {
    const subjectKeyIdentifier = cert.extensions.find((ext) => ext.extnID === '2.5.29.14');
    if (subjectKeyIdentifier) {
        let skiValue = Buffer.from(subjectKeyIdentifier.extnValue.valueBlock.valueHexView).toString('hex');
        skiValue = skiValue.replace(/^(?:3016)?(?:0414)?/, '');
        return skiValue;
    }
    else {
        // console.log('\x1b[31m%s\x1b[0m', 'no subject key identifier found'); // it's no big deal if this is not found
        // do a sha1 of the certificate tbs
        const hash = js_sha256_1.sha256.create();
        hash.update(cert.tbsView);
        return hash.hex();
    }
};
exports.getSubjectKeyIdentifier = getSubjectKeyIdentifier;
const getAuthorityKeyIdentifier = (cert) => {
    const authorityKeyIdentifierExt = cert.extensions.find((ext) => ext.extnID === '2.5.29.35');
    if (authorityKeyIdentifierExt) {
        const extnValueHex = authorityKeyIdentifierExt.extnValue.valueBlock.valueHexView;
        const asn1 = asn1js.fromBER(extnValueHex);
        if (asn1.offset !== -1) {
            const constructedValue = asn1.result.valueBlock;
            if (constructedValue.value) {
                const keyIdentifierElement = constructedValue.value.find((element) => element.idBlock.tagClass === 3 && element.idBlock.tagNumber === 0);
                if (keyIdentifierElement) {
                    return Buffer.from(keyIdentifierElement.valueBlock.valueHexView).toString('hex');
                }
            }
        }
    }
    else {
        console.log('\x1b[31m%s\x1b[0m', 'no authority key identifier found');
    }
    return '';
};
exports.getAuthorityKeyIdentifier = getAuthorityKeyIdentifier;
function getIssuerCountryCode(cert) {
    const issuerRDN = cert.issuer.typesAndValues;
    let issuerCountryCode = '';
    for (const rdn of issuerRDN) {
        if (rdn.type === '2.5.4.6') {
            // OID for Country Name
            issuerCountryCode = rdn.value.valueBlock.value;
            break;
        }
    }
    return issuerCountryCode.toUpperCase();
}
