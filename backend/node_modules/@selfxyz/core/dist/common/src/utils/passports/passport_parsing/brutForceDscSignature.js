"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.brutforceSignatureAlgorithmDsc = brutforceSignatureAlgorithmDsc;
exports.getTBSHash = getTBSHash;
const constants_1 = require("../../../constants/constants");
const constants_2 = require("../../../constants/constants");
const elliptic_1 = require("../../certificate_parsing/elliptic");
const asn1js = __importStar(require("asn1js"));
const forge = __importStar(require("node-forge"));
const curves_1 = require("../../certificate_parsing/curves");
const pkijs_1 = require("pkijs");
const hash_1 = require("../../hash");
function brutforceSignatureAlgorithmDsc(dsc, csca) {
    if (csca.signatureAlgorithm === 'ecdsa') {
        const hashAlgorithm = brutforceHashAlgorithmDsc(dsc, csca, 'ecdsa');
        return {
            signatureAlgorithm: 'ecdsa',
            hashAlgorithm: hashAlgorithm,
            saltLength: 0,
        };
    }
    else if (csca.signatureAlgorithm === 'rsa') {
        const hashAlgorithm = brutforceHashAlgorithmDsc(dsc, csca, 'rsa');
        if (hashAlgorithm) {
            return {
                signatureAlgorithm: 'rsa',
                hashAlgorithm: hashAlgorithm,
                saltLength: 0,
            };
        }
    }
    //it's important to not put 'else if' statement here, because a rsapss signature can use rsa key certificate.
    for (const saltLength of constants_1.saltLengths) {
        const hashAlgorithm = brutforceHashAlgorithmDsc(dsc, csca, 'rsapss', saltLength);
        if (hashAlgorithm) {
            return {
                signatureAlgorithm: 'rsapss',
                hashAlgorithm: hashAlgorithm,
                saltLength: saltLength,
            };
        }
    }
}
function brutforceHashAlgorithmDsc(dsc, csca, signatureAlgorithm, saltLength) {
    for (const hashFunction of constants_2.hashAlgos) {
        if (verifySignature(dsc, csca, signatureAlgorithm, hashFunction, saltLength)) {
            // console.log(`✓ Success with hash function: ${hashFunction}, signatureAlgorithm: ${signatureAlgorithm}, saltLength: ${saltLength}`);
            return hashFunction;
        }
        // console.log(`✗ Failed with hash function: ${hashFunction}, signatureAlgorithm: ${signatureAlgorithm}, saltLength: ${saltLength}`);
    }
    return false;
}
function verifySignature(dsc, csca, signatureAlgorithm, hashAlgorithm, saltLength = 0) {
    switch (signatureAlgorithm) {
        case 'ecdsa':
            return verifyECDSA(dsc, csca, hashAlgorithm);
        case 'rsa':
            return verifyRSA(dsc, csca, hashAlgorithm);
        case 'rsapss':
            return verifyRSAPSS(dsc, csca, hashAlgorithm, saltLength);
    }
}
function verifyECDSA(dsc, csca, hashAlgorithm) {
    const elliptic = (0, elliptic_1.initElliptic)();
    const certBuffer_csca = Buffer.from(csca.rawPem.replace(/(-----(BEGIN|END) CERTIFICATE-----|\n)/g, ''), 'base64');
    const asn1Data_csca = asn1js.fromBER(certBuffer_csca);
    const cert_csca = new pkijs_1.Certificate({ schema: asn1Data_csca.result });
    const publicKeyInfo_csca = cert_csca.subjectPublicKeyInfo;
    const publicKeyBuffer_csca = publicKeyInfo_csca.subjectPublicKey.valueBlock.valueHexView;
    const curveForElliptic_csca = (0, curves_1.getCurveForElliptic)(csca.publicKeyDetails.curve);
    const ec_csca = new elliptic.ec(curveForElliptic_csca);
    const key_csca = ec_csca.keyFromPublic(publicKeyBuffer_csca);
    const tbsHash = getTBSHash(dsc.rawPem, hashAlgorithm, 'hex');
    const certBuffer_dsc = Buffer.from(dsc.rawPem.replace(/(-----(BEGIN|END) CERTIFICATE-----|\n)/g, ''), 'base64');
    const asn1Data_dsc = asn1js.fromBER(certBuffer_dsc);
    const cert_dsc = new pkijs_1.Certificate({ schema: asn1Data_dsc.result });
    const signatureValue = cert_dsc.signatureValue.valueBlock.valueHexView;
    const signature_crypto = Buffer.from(signatureValue).toString('hex');
    return key_csca.verify(tbsHash, signature_crypto);
}
function verifyRSA(dsc, csca, hashAlgorithm) {
    try {
        const cscaCert = forge.pki.certificateFromPem(csca.rawPem);
        const tbsHash = getTBSHash(dsc.rawPem, hashAlgorithm);
        if (!tbsHash) {
            return false;
        }
        const publicKey = cscaCert.publicKey;
        const certBuffer_dsc = Buffer.from(dsc.rawPem.replace(/(-----(BEGIN|END) CERTIFICATE-----|\n)/g, ''), 'base64');
        const asn1Data_dsc = asn1js.fromBER(certBuffer_dsc);
        const cert_dsc = new pkijs_1.Certificate({ schema: asn1Data_dsc.result });
        const signatureValue = cert_dsc.signatureValue.valueBlock.valueHexView;
        const signature = Buffer.from(signatureValue).toString('binary');
        try {
            const verified = publicKey.verify(tbsHash, signature);
            return verified;
        }
        catch (verifyError) {
            return false;
        }
    }
    catch (error) {
        return false;
    }
}
function verifyRSAPSS(dsc, csca, hashAlgorithm, saltLength) {
    try {
        const dscCert = forge.pki.certificateFromPem(dsc.rawPem);
        const cscaCert = forge.pki.certificateFromPem(csca.rawPem);
        const tbsHash = getTBSHash(dsc.rawPem, hashAlgorithm);
        if (!tbsHash) {
            return false;
        }
        const publicKey = cscaCert.publicKey;
        const signature = dscCert.signature;
        if (saltLength === 0) {
            throw new Error('Salt length is required for RSA-PSS');
        }
        try {
            const pss = forge.pss.create({
                md: forge.md[hashAlgorithm].create(),
                mgf: forge.mgf.mgf1.create(forge.md[hashAlgorithm].create()),
                saltLength: saltLength,
            });
            return publicKey.verify(tbsHash, signature, pss);
        }
        catch (verifyError) {
            return false;
        }
    }
    catch (error) {
        return false;
    }
}
function getTBSHash(pem, hashFunction, format = 'data') {
    const certBuffer = Buffer.from(pem.replace(/(-----(BEGIN|END) CERTIFICATE-----|\n)/g, ''), 'base64');
    const asn1Data_cert = asn1js.fromBER(certBuffer);
    const cert = new pkijs_1.Certificate({ schema: asn1Data_cert.result });
    const tbsAsn1 = cert.encodeTBS();
    const tbsDer = tbsAsn1.toBER(false);
    const tbsBytes = Buffer.from(tbsDer);
    const tbsBytesArray = Array.from(tbsBytes);
    const msgHash = (0, hash_1.hash)(hashFunction, tbsBytesArray, format === 'hex' ? 'hex' : 'binary');
    return msgHash;
}
