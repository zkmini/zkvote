"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatForbiddenCountriesListFromCircuitOutput = formatForbiddenCountriesListFromCircuitOutput;
exports.getAttributeFromUnpackedReveal = getAttributeFromUnpackedReveal;
exports.unpackReveal = unpackReveal;
exports.getOlderThanFromCircuitOutput = getOlderThanFromCircuitOutput;
exports.formatAndUnpackReveal = formatAndUnpackReveal;
exports.formatAndUnpackForbiddenCountriesList = formatAndUnpackForbiddenCountriesList;
exports.revealBitmapFromMapping = revealBitmapFromMapping;
exports.revealBitmapFromAttributes = revealBitmapFromAttributes;
const constants_1 = require("../../constants/constants");
/*** OpenPassport Attestation ***/
function formatForbiddenCountriesListFromCircuitOutput(forbiddenCountriesList) {
    const countryList1 = unpackReveal(forbiddenCountriesList);
    // dump every '\x00' value from the list
    const cleanedCountryList = countryList1.filter((value) => value !== '\x00');
    // Concatenate every 3 elements to form country codes
    const formattedCountryList = [];
    for (let i = 0; i < cleanedCountryList.length; i += 3) {
        const countryCode = cleanedCountryList.slice(i, i + 3).join('');
        if (countryCode.length === 3) {
            formattedCountryList.push(countryCode);
        }
    }
    return formattedCountryList;
}
/*** Disclose circuits ***/
function trimu0000(unpackedReveal) {
    return unpackedReveal.filter((value) => value !== '\u0000');
}
function getAttributeFromUnpackedReveal(unpackedReveal, attribute) {
    const position = constants_1.attributeToPosition[attribute];
    let attributeValue = '';
    for (let i = position[0]; i <= position[1]; i++) {
        if (unpackedReveal[i] !== '\u0000') {
            attributeValue += unpackedReveal[i];
        }
    }
    return attributeValue;
}
function unpackReveal(revealedData_packed) {
    // If revealedData_packed is not an array, convert it to an array
    const packedArray = Array.isArray(revealedData_packed)
        ? revealedData_packed
        : [revealedData_packed];
    const bytesCount = [31, 31, 31]; // nb of bytes in each of the first three field elements
    const bytesArray = packedArray.flatMap((element, index) => {
        const bytes = bytesCount[index] || 31; // Use 31 as default if index is out of range
        const elementBigInt = BigInt(element);
        const byteMask = BigInt(255); // 0xFF
        const bytesOfElement = [...Array(bytes)].map((_, byteIndex) => {
            return (elementBigInt >> (BigInt(byteIndex) * BigInt(8))) & byteMask;
        });
        return bytesOfElement;
    });
    return bytesArray.map((byte) => String.fromCharCode(Number(byte)));
}
function getOlderThanFromCircuitOutput(olderThan) {
    const ageString = olderThan.map((code) => String.fromCharCode(parseInt(code))).join('');
    const age = parseInt(ageString, 10);
    return isNaN(age) ? 0 : age;
}
function formatAndUnpackReveal(revealedData_packed) {
    const revealedData_packed_formatted = [
        revealedData_packed['revealedData_packed[0]'],
        revealedData_packed['revealedData_packed[1]'],
        revealedData_packed['revealedData_packed[2]'],
    ];
    return unpackReveal(revealedData_packed_formatted);
}
function formatAndUnpackForbiddenCountriesList(forbiddenCountriesList_packed) {
    const forbiddenCountriesList_packed_formatted = [
        forbiddenCountriesList_packed['forbidden_countries_list_packed[0]'],
        forbiddenCountriesList_packed['forbidden_countries_list_packed[1]'],
        forbiddenCountriesList_packed['forbidden_countries_list_packed[2]'],
        forbiddenCountriesList_packed['forbidden_countries_list_packed[3]'],
    ];
    const trimmed = trimu0000(unpackReveal(forbiddenCountriesList_packed_formatted));
    const countries = [];
    for (let i = 0; i < trimmed.length; i += 3) {
        const countryCode = trimmed.slice(i, i + 3).join('');
        if (countryCode.length === 3) {
            countries.push(countryCode);
        }
    }
    return countries; // Return countries array instead of trimmed
}
function revealBitmapFromMapping(attributeToReveal) {
    const reveal_bitmap = Array(90).fill('0');
    Object.entries(attributeToReveal).forEach(([attribute, reveal]) => {
        if (reveal !== '') {
            const [start, end] = constants_1.attributeToPosition[attribute];
            reveal_bitmap.fill('1', start, end + 1);
        }
    });
    return reveal_bitmap;
}
function revealBitmapFromAttributes(disclosureOptions) {
    const reveal_bitmap = Array(88).fill('0');
    Object.entries(disclosureOptions).forEach(([attribute, { enabled }]) => {
        if (enabled && attribute in constants_1.attributeToPosition) {
            const [start, end] = constants_1.attributeToPosition[attribute];
            reveal_bitmap.fill('1', start, end + 1);
        }
    });
    return reveal_bitmap;
}
