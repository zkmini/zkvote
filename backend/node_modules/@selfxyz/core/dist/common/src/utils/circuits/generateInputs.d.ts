import { PassportData } from '../types';
import { LeanIMT } from '@openpassport/zk-kit-lean-imt';
import { SMT } from '@openpassport/zk-kit-smt';
export declare function generateCircuitInputsDSC(dscCertificate: string, serializedCscaTree: string[][]): {
    raw_csca: string[];
    raw_csca_actual_length: string;
    csca_pubKey_offset: string;
    csca_pubKey_actual_size: string;
    raw_dsc: string[];
    raw_dsc_padded_length: string;
    csca_pubKey: any;
    signature: string[];
    merkle_root: any;
    path: any;
    siblings: any;
};
export declare function generateCircuitInputsRegister(secret: string, passportData: PassportData, serializedDscTree: string): {
    [x: string]: string[];
};
export declare function generateCircuitInputsVCandDisclose(secret: string, attestation_id: string, passportData: PassportData, scope: string, selector_dg1: string[], selector_older_than: string | number, merkletree: LeanIMT, majority: string, passportNo_smt: SMT, nameAndDob_smt: SMT, nameAndYob_smt: SMT, selector_ofac: string | number, forbidden_countries_list: string[], user_identifier: string): {
    secret: string[];
    attestation_id: string[];
    dg1: string[];
    eContent_shaBytes_packed_hash: string[];
    dsc_tree_leaf: string[];
    merkle_root: string[];
    leaf_depth: string[];
    path: string[];
    siblings: string[];
    selector_dg1: string[];
    selector_older_than: string[];
    scope: string[];
    current_date: string[];
    majority: string[];
    user_identifier: string[];
    ofac_passportno_smt_root: string[];
    ofac_passportno_smt_leaf_key: string[];
    ofac_passportno_smt_siblings: string[];
    ofac_namedob_smt_root: string[];
    ofac_namedob_smt_leaf_key: string[];
    ofac_namedob_smt_siblings: string[];
    ofac_nameyob_smt_root: string[];
    ofac_nameyob_smt_leaf_key: string[];
    ofac_nameyob_smt_siblings: string[];
    selector_ofac: string[];
    forbidden_countries_list: string[];
};
export declare function generateCircuitInputsOfac(passportData: PassportData, sparsemerkletree: SMT, proofLevel: number): {
    dg1: string[];
    smt_leaf_key: string[];
    smt_root: string[];
    smt_siblings: string[];
};
export declare function generateCircuitInputsCountryVerifier(passportData: PassportData, sparsemerkletree: SMT): {
    dg1: string[];
    hostCountry: string[];
    smt_leaf_key: string[];
    smt_root: string[];
    smt_siblings: string[];
};
export declare function findIndexInTree(tree: LeanIMT, commitment: bigint): number;
export declare function formatInput(input: any): string[];
