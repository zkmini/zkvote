import { ethers } from 'ethers';
import { PublicSignals } from 'snarkjs';
import type { SelfVerificationResult } from '../../../common/src/utils/selfAttestation';
import { UserIdType } from '../../../common/src/utils/circuits/uuid';
import { Country3LetterCode } from '../../../common/src/constants/countries';
export declare class SelfBackendVerifier {
    protected scope: string;
    protected attestationId: number;
    protected user_identifier_type: UserIdType;
    protected targetRootTimestamp: {
        enabled: boolean;
        value: number;
    };
    protected nationality: {
        enabled: boolean;
        value: Country3LetterCode;
    };
    protected minimumAge: {
        enabled: boolean;
        value: string;
    };
    protected excludedCountries: {
        enabled: boolean;
        value: Country3LetterCode[];
    };
    protected passportNoOfac: boolean;
    protected nameAndDobOfac: boolean;
    protected nameAndYobOfac: boolean;
    protected registryContract: ethers.Contract;
    protected verifyAllContract: ethers.Contract;
    protected mockPassport: boolean;
    constructor(scope: string, endpoint: string, user_identifier_type?: UserIdType, mockPassport?: boolean);
    verify(proof: any, publicSignals: PublicSignals): Promise<SelfVerificationResult>;
    setMinimumAge(age: number): this;
    setNationality(country: Country3LetterCode): this;
    /**
     * Sets the list of countries to be excluded in the verification.
     * This list must exactly match the list configured in the backend.
     *
     * @param countries Array of 3-letter country codes to exclude
     * @returns This instance for method chaining
     * @throws Error if more than 40 countries are provided or if any country code is invalid
     */
    excludeCountries(...countries: Country3LetterCode[]): this;
    enablePassportNoOfacCheck(): this;
    enableNameAndDobOfacCheck(): this;
    enableNameAndYobOfacCheck(): this;
}
